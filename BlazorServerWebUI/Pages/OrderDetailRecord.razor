@using BlazorServerWebUI.Authentication
@using BlazorServerWebUI.Shared
@using BlazorServerWebUI.Models
@using System.Net.Http.Headers
@inject HttpClient httpClient
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Administrator")]

@if (product != null)
{
    <div class="col-12">
        <span>
            <b>@product.ProductName (@product.ProductCode)</b> - @Quantity
        </span>
    </div>
}

@code {
    [Parameter]
    public int ProductId { get; set; }
    [Parameter]
    public int Quantity { get; set; }
    private ProductViewModel? product;
    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrWhiteSpace(token))
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            product = await httpClient.GetFromJsonAsync<ProductViewModel>($"api/Product/{ProductId}");
            await base.OnInitializedAsync();
        }
        else
            navManager.NavigateTo("/login");
    }
}