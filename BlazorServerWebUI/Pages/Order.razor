@page "/order"
@using BlazorServerWebUI.Authentication
@using BlazorServerWebUI.Shared
@using BlazorServerWebUI.Models
@using System.Net.Http.Headers
@inject HttpClient httpClient
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Administrator")]

<h3>Order</h3>

<div class="row">
    <div class="col-12 mt-4">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <td>Customer</td>
                        <td>Ordered On</td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </thead>
                <tbody>
                    <AddOrder NewOrder="newOrder" FetchOrderList="FetchOrderList" IsEditMode="false" PostSaveEvent="() => { newOrder = new OrderViewModel(); }" />
                    @if (orderList != null && orderList.Count != 0)
                    {
                        foreach (var order in orderList)
                        {
                            <OrderRecord Order="order" DeleteOrder="DeleteOrder" FetchOrderList="FetchOrderList" />
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
@code {
    private OrderViewModel newOrder = new OrderViewModel();
    private List<OrderViewModel>? orderList;
    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrWhiteSpace(token))
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            await FetchOrderList();
            await base.OnInitializedAsync();
        }
        else
            navManager.NavigateTo("/login");
    }
    private async Task FetchOrderList()
    {
        orderList = await httpClient.GetFromJsonAsync<List<OrderViewModel>>("api/Order");
    }
    private async Task DeleteOrder(string orderId)
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        await httpClient.DeleteAsync($"api/Order/{orderId}");
        await FetchOrderList();
    }
}
